services:
  postgres:
    image: postgres:16-alpine
    container_name: users_postgres
    env_file: ./.env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${USERS_DB_NAME}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${USERS_DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks: [nebula-network]

  postgres_notifications:
    image: postgres:16-alpine
    container_name: notifications_postgres
    env_file: ./.env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${NOTIFS_DB_NAME}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5433:5432"
    volumes:
      - pgdata_notifications:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${NOTIFS_DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks: [nebula-network]

  redis:
    image: redis:7-alpine
    container_name: nebula_redis
    env_file: ./.env
    ports:
      - "6379:6379"
    command: >
      redis-server
      --save ""
      --appendonly no
      --maxmemory 256mb
      --maxmemory-policy noeviction
      --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks: [nebula-network]

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: nebula_rabbitmq
    env_file: ./.env
    ports:
      - "5672:5672" 
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks: [nebula-network]

  app_users:
    build:
      context: .
      dockerfile: services/users/Dockerfile
    container_name: app_users
    env_file: ./.env
    environment:
      NODE_ENV: production
      # internal override
      USERS_DB_HOST: postgres
      USERS_DB_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      # Prisma CLI
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${USERS_DB_NAME}?schema=public
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "3001:3001"
    restart: unless-stopped
    networks: [nebula-network]

  app_scheduler:
    build:
      context: .
      dockerfile: services/scheduler/Dockerfile
    container_name: app_scheduler
    env_file: ./.env
    environment:
      NODE_ENV: production
      # Internal override
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks: [nebula-network]

  app_notifications:
    build:
      context: .
      dockerfile: services/notifications/Dockerfile
    container_name: app_notifications
    env_file: ./.env
    environment:
      NODE_ENV: production
      # Internal override
      NOTIFS_DB_HOST: postgres_notifications
      NOTIFS_DB_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      # Prisma CLI
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres_notifications:5432/${NOTIFS_DB_NAME}?schema=public
    depends_on:
      postgres_notifications:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks: [nebula-network]

volumes:
  pgdata:
  pgdata_notifications:
  rabbitmq_data:
  rabbitmq_logs:

networks:
  nebula-network:
    driver: bridge
    name: nebula-network